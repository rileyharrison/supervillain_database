1. New Folder: crud-asses
2. add this as project folder in atom
3. npm init
4. npm install angular —save
5. npm install angular-route —save
6. npm install body-parser —save
7. npm install express —save
8. npm install mongoose —save
9. modify package.son after test, "start": "node server/app.js”, don’t forget comma after test
10. new file .gitignore contains only the text “node_modules” without quotes
11. New folder > server
12. new folder server > models
13. new folder server > modules
14. new folder server > public
15. new file server> app.js
16. new file in server > models > NOUN PLURAL of what I will save .js for database, i.e. movies.js
17. new file server > modules > db.js, holds and exports database connection
18. new file server > modules > index.js, this is basically a router.
19. new folder server > public > assets
20. new folder server > public > views
21. new folder server > public > assets > scripts
22. new folder server > public > assets > vendors
23. new file server > public > assets > scripts > app.js
24. new file server > public > assets > scripts > controllers.js
25. new file server > public  > assets > scripts > factories.js
26. copy file angular-route.js from node_modules to server > public > assets > vendors
27. copy file angular-route.min.js from node_modules to server > public > assets > vendors
28. copy file angular-route.min.js.map from node_modules to server > public > assets > vendors
29. copy file angular.js from node_modules to server > public > assets > vendors
30. copy file angular.min.js from node_modules to server > public > assets > vendors
31. copy file angular.min.js.map from node_modules to server > public > assets > vendors
32. new folder server > public > views > routes
33. new file server > public > views > index.html
34. new file server > public > views > routes > add.html
35. new file server > public > views > routes > home.html
36. new file server > public > views > routes > view.html
37. retype contents of server > models > movies.js
38. retype contents of server > modules > db.js ***NOTE for open, it's mogoDB.once, NOT mongoDB.on
39. retype contents of server > modules > index.js **Note: delete url is noun Plural, change to singular in all cases like post get
40. retype contents of public > assets > scripts > app.js
41. retype contents of public  assets > scripts > controllers.js
42. retype contents of public > assets > scripts > factories.js
43. retype contents of server > public > views > routes > add.html
44. retype contents of server > public > views > routes > home.html
45. retype contents of server > public > views > routes > view.html
46. retype contents of server > public > views > index.html
47. retype contents of server > public > app.js

**** // TODO database connection string!

***
TODO dependencies. For each thing that changes, make note of what needs to change where.
Database: new database name for each project, or else you will overwrite the existing database.
You will need to change the database name in the connection string (mongoURI) in db.js.
Models: in server > models > , you need a file for each model, such as villain.js, lair.js
When Models change, the following code is affected:
server > models > noun.js
index.js: var declaration and require
index.js: router get and post
controllers.js:  villainService, scope.villains, scope.addVillain
factories.js: lots
add.html lots
home.html: instructions
view.html: nouns
index.html: title h1 nouns
app.js: nothing



index changes indicate change get and post calls from lower
also indicate changes in form fields in views
controlers indicates changes in factories
TODO

@channel: My STRONG recommendation of work the next couple nights:
Build an application that uses Angular Routing, Factories, MongoDB, and organizationally on the Server is modular (what we did today).

Three views:
1 View that lays out directions on how to use the application,
2 View that collections information off a form using Text Entries and Drop Downs, all saving to one object
3 View that displays information entered from the view

The goal is to be able to set up such a project is roughly 2.5 hours. Once again, to verbalize what you would
 be able to do in 2.5 hours, is set up a MEAN Stack application, with a CRD (Missing update) interface, all following the MVC pattern.

[4:23]
Proud of you all, you all have done some incredible work this past 6 weeks.

tasks:
 1. build directions into home view, label instructions as such.
 2. modify "add" form so that rather than doing a search, it lets you take stuff off of a form and save it. NOTE include dropdowns
 3. modify "view" form so that there are buttons for "delete"
